//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Samples/Input System/1.7.0/Custom Device/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""Android"",
            ""id"": ""cec8a9d2-24ec-4a08-9e28-01b9630db25a"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""9c7b2997-8cb1-44f1-bde1-477fffad27af"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""0af47362-d475-47d6-b3b6-3e33fa93b47a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInv"",
                    ""type"": ""Button"",
                    ""id"": ""8f38797d-813f-4f72-840c-1fa484fdd4ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""41b5738a-bab9-4865-a4aa-1bb9c42fa075"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fb2df950-b77a-4049-8818-aedc5035e1d9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shifting"",
                    ""type"": ""Button"",
                    ""id"": ""67e874c9-b8c2-4852-8851-e88ff3f802f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""33420567-74b8-47be-81e3-cac20804d7af"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""android"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bfae835-e96b-4ce2-a1d0-9b116ed80d24"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""android"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2920f930-f5ab-455c-bff2-e5e1bf8232e3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""android"",
                    ""action"": ""OpenInv"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e77b381f-ea6b-46a8-abe4-6c0ae70e057e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""android"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a40cea24-7dac-406f-822f-0570e82a3ebd"",
                    ""path"": ""<AndroidGamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""android"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""821171d7-f1ed-4c40-8f62-d4261041c295"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a183bd42-c43d-4487-b527-7bddeea1d0ce"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""android"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""73381722-e48c-474f-8172-ac41253868be"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""android"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c4a97af5-3878-423b-9356-ac8db642265e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""android"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1c6d4b8f-b31b-42f0-afba-b90ad1da791e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""android"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a7ab40d1-7dbc-4fb8-ba17-b0ff44478655"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""android"",
                    ""action"": ""Shifting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""android"",
            ""bindingGroup"": ""android"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Android
        m_Android = asset.FindActionMap("Android", throwIfNotFound: true);
        m_Android_Jump = m_Android.FindAction("Jump", throwIfNotFound: true);
        m_Android_Sprint = m_Android.FindAction("Sprint", throwIfNotFound: true);
        m_Android_OpenInv = m_Android.FindAction("OpenInv", throwIfNotFound: true);
        m_Android_Escape = m_Android.FindAction("Escape", throwIfNotFound: true);
        m_Android_Movement = m_Android.FindAction("Movement", throwIfNotFound: true);
        m_Android_Shifting = m_Android.FindAction("Shifting", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Android
    private readonly InputActionMap m_Android;
    private List<IAndroidActions> m_AndroidActionsCallbackInterfaces = new List<IAndroidActions>();
    private readonly InputAction m_Android_Jump;
    private readonly InputAction m_Android_Sprint;
    private readonly InputAction m_Android_OpenInv;
    private readonly InputAction m_Android_Escape;
    private readonly InputAction m_Android_Movement;
    private readonly InputAction m_Android_Shifting;
    public struct AndroidActions
    {
        private @NewControls m_Wrapper;
        public AndroidActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Android_Jump;
        public InputAction @Sprint => m_Wrapper.m_Android_Sprint;
        public InputAction @OpenInv => m_Wrapper.m_Android_OpenInv;
        public InputAction @Escape => m_Wrapper.m_Android_Escape;
        public InputAction @Movement => m_Wrapper.m_Android_Movement;
        public InputAction @Shifting => m_Wrapper.m_Android_Shifting;
        public InputActionMap Get() { return m_Wrapper.m_Android; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AndroidActions set) { return set.Get(); }
        public void AddCallbacks(IAndroidActions instance)
        {
            if (instance == null || m_Wrapper.m_AndroidActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AndroidActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @OpenInv.started += instance.OnOpenInv;
            @OpenInv.performed += instance.OnOpenInv;
            @OpenInv.canceled += instance.OnOpenInv;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Shifting.started += instance.OnShifting;
            @Shifting.performed += instance.OnShifting;
            @Shifting.canceled += instance.OnShifting;
        }

        private void UnregisterCallbacks(IAndroidActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @OpenInv.started -= instance.OnOpenInv;
            @OpenInv.performed -= instance.OnOpenInv;
            @OpenInv.canceled -= instance.OnOpenInv;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Shifting.started -= instance.OnShifting;
            @Shifting.performed -= instance.OnShifting;
            @Shifting.canceled -= instance.OnShifting;
        }

        public void RemoveCallbacks(IAndroidActions instance)
        {
            if (m_Wrapper.m_AndroidActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAndroidActions instance)
        {
            foreach (var item in m_Wrapper.m_AndroidActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AndroidActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AndroidActions @Android => new AndroidActions(this);
    private int m_androidSchemeIndex = -1;
    public InputControlScheme androidScheme
    {
        get
        {
            if (m_androidSchemeIndex == -1) m_androidSchemeIndex = asset.FindControlSchemeIndex("android");
            return asset.controlSchemes[m_androidSchemeIndex];
        }
    }
    public interface IAndroidActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnOpenInv(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnShifting(InputAction.CallbackContext context);
    }
}
